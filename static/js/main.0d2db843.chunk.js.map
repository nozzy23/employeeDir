{"version":3,"sources":["logo.svg","components/search_employee.js","components/list_employee.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Lookup","props","useState","name","setname","onSubmit","e","preventDefault","handleSubmit","className","htmlFor","onChange","target","value","search","type","placeholder","onClick","handleFormSubmit","EmployeeList","scope","id","occupation","src","image","App","state","employees","role","Changename","setState","console","log","this","filter","employee","toLowerCase","includes","map","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sxBAAAA,EAAOC,QAAU,IAA0B,kC,mJC2C5BC,MAxCf,SAAgBC,GAAQ,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,KAYrB,OACE,0BAAMC,SAAU,SAACC,GACfA,EAAEC,iBACFN,EAAMO,aAAaL,IAAQM,UAAU,UACrC,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,UAAf,oBACA,2BACEC,SAXU,SAACL,GACjBF,EAAQE,EAAEM,OAAOC,QAWXA,MAAOZ,EAAMa,OACbX,KAAK,OACLY,KAAK,OACLN,UAAU,eACVO,YAAY,wBAId,4BAAQC,QAAShB,EAAMiB,iBAAkBT,UAAU,wBAAnD,a,OCPOU,MAtBf,SAAsBlB,GAClB,OACA,2BAAOQ,UAAU,uBACjB,+BACI,4BACA,wBAAIW,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,UAGJ,+BACI,4BACA,wBAAIA,MAAM,OAAOnB,EAAMoB,IACvB,4BAAKpB,EAAME,MACX,4BAAKF,EAAMqB,YACX,4BAAI,yBAAKC,IAAKtB,EAAMuB,aCuBbC,E,4MAhCbC,MAAQ,CACNC,UAAWA,EACXxB,KAAM,GACNyB,KAAK,I,EAGPC,WAAa,SAAC1B,GAEZ,EAAK2B,SAAS,CAAE3B,KAAMA,IACtB4B,QAAQC,IAAI,EAAKN,Q,uDAIT,IAAD,OAEP,OADAK,QAAQC,IAAIL,GAEV,6BACE,kBAAC,EAAD,CAAQnB,aAAcyB,KAAKJ,aAE1BI,KAAKP,MAAMC,UAAUO,QAAO,SAAAC,GAC3B,OAAQ,EAAKT,MAAMvB,MAAQgC,EAAShC,KAAKiC,cAAcC,SAAS,EAAKX,MAAMvB,KAAKiC,kBAAiBE,KAAI,SAACH,EAAUI,GAAX,OACrG,kBAAC,EAAD,CAAcC,IAAKD,EACjBpC,KAAMgC,EAAShC,KACfmB,WAAYa,EAASb,gBAP3B,S,GAjBYmB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.0d2db843.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\n\n\nfunction Lookup(props) {\n  const [name, setname] = useState(\"\");\n\n  // const handleSubmit =(e)=> {\n  //   e.preventDefault();\n  //   console.log(\"My name is \" + name);\n  // };\n\n  const handleInput=(e)=>{\n    setname(e.target.value)\n  }\n\n  return (\n    <form onSubmit={(e)=>{\n      e.preventDefault();\n      props.handleSubmit(name)}} className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search Employee:</label>\n        <input\n          onChange={handleInput}\n          value={props.search}\n          name=\"name\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for employee\"\n        />\n        \n        \n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\n          Search\n        </button>\n      </div>\n    </form>\n\n  );\n\n  \n  \n}\n\nexport default Lookup;","import React from \"react\";\n\nfunction EmployeeList(props){\n    return(\n    <table className=\"table table-striped\">\n    <thead>\n        <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Role</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n        <th scope=\"row\">{props.id}</th>\n        <td>{props.name}</td>\n        <td>{props.occupation}</td>\n        <td><img src={props.image}/></td>\n        </tr>\n    </tbody>\n    \n    </table>\n)};\n\nexport default EmployeeList;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Lookup from './components/search_employee';\nimport employees from './employees.json';\nimport EmployeeList from './components/list_employee'\n\nclass App extends Component {\n  state = {\n    employees: employees,\n    name: \"\",\n    role:\"\"\n  };\n\n  Changename = (name) => {\n    // e.preventDefault()\n    this.setState({ name: name })\n    console.log(this.state);\n  }\n\n\n  render() {\n    console.log(employees)\n    return (\n      <div>\n        <Lookup handleSubmit={this.Changename} />\n\n        {this.state.employees.filter(employee => {\n          return !this.state.name || employee.name.toLowerCase().includes(this.state.name.toLowerCase())}).map((employee, index) => (\n          <EmployeeList key={index}\n            name={employee.name}\n            occupation={employee.occupation}\n          />\n        ))};\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}